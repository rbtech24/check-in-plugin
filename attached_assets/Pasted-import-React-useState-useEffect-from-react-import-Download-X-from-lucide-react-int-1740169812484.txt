import React, { useState, useEffect } from 'react';
import { Download, X } from 'lucide-react';

interface BeforeInstallPromptEvent extends Event {
  prompt: () => Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

const PWA_PROMPT_DISMISSED = 'pwa-prompt-dismissed';

export function PWAInstallPrompt() {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [showPrompt, setShowPrompt] = useState(false);

  useEffect(() => {
    // Check if user has previously dismissed the prompt
    const hasUserDismissed = localStorage.getItem(PWA_PROMPT_DISMISSED);
    
    const handler = (e: Event) => {
      // Prevent Chrome 67 and earlier from automatically showing the prompt
      e.preventDefault();
      // Store the event for later use
      setDeferredPrompt(e as BeforeInstallPromptEvent);
      // Only show prompt if user hasn't dismissed it before
      if (!hasUserDismissed) {
        setShowPrompt(true);
      }
    };

    window.addEventListener('beforeinstallprompt', handler);
    
    // Also check if it's already installed
    window.addEventListener('appinstalled', () => {
      setShowPrompt(false);
      setDeferredPrompt(null);
    });

    return () => {
      window.removeEventListener('beforeinstallprompt', handler);
    };
  }, []);

  const handleDismiss = () => {
    setShowPrompt(false);
    // Remember user's choice
    localStorage.setItem(PWA_PROMPT_DISMISSED, 'true');
  };

  const handleInstallClick = async () => {
    if (!deferredPrompt) return;

    // Show the install prompt
    await deferredPrompt.prompt();

    // Wait for the user to respond to the prompt
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      console.log('User accepted the install prompt');
    }

    // Clear the deferredPrompt
    setDeferredPrompt(null);
    setShowPrompt(false);
  };

  if (!showPrompt) return null;

  return (
    <div className="fixed inset-x-0 bottom-0 z-50 p-4 md:p-0 md:bottom-4 md:right-4 md:left-auto">
      <div className="bg-white rounded-lg shadow-lg border border-gray-200 overflow-hidden max-w-md mx-auto md:mx-0">
        <div className="relative">
          {/* Banner Image */}
          <div className="h-24 bg-gradient-to-r from-indigo-600 to-purple-600"></div>
          
          {/* Close Button */}
          <button
            onClick={handleDismiss}
            className="absolute top-2 right-2 p-1.5 rounded-full bg-black/10 text-white hover:bg-black/20 transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
          
          {/* App Icon */}
          <div className="absolute -bottom-8 left-4">
            <div className="w-16 h-16 rounded-xl bg-white shadow-lg p-2">
              <div className="w-full h-full rounded-lg bg-indigo-600 flex items-center justify-center">
                <Download className="w-8 h-8 text-white" />
              </div>
            </div>
          </div>
        </div>
        
        <div className="p-4 pt-10">
          <h3 className="text-lg font-semibold text-gray-900">Install FitLife Tracker</h3>
          <p className="mt-1 text-sm text-gray-600">
            Get the best experience with our app! Install it for:
          </p>
          <ul className="mt-2 text-sm text-gray-600 space-y-1">
            <li>• Faster access to your workouts</li>
            <li>• Works offline</li>
            <li>• Better performance</li>
          </ul>
          
          <div className="mt-4 flex gap-3">
            <button
              onClick={handleInstallClick}
              className="flex-1 px-4 py-2.5 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            >
              Install App
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}